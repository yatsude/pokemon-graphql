on:
  pull_request:
    types: [ opened, synchronize, reopened ]
    branches:
      - main

env:
  CARGO_TERM_COLOR: always
  SQLX_VERSION: 0.7.3
  SQLX_FEATURES: "rustls,postgres"

  DATABASE_USERNAME: postgres
  DATABASE_PASSWORD: password
  DATABASE_HOST: 127.0.0.1
  DATABASE_NAME: pokemon_graphql
  DATABASE_PORT: 5432

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      ENV: test

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: ${{ env.DATABASE_USERNAME }}
          POSTGRES_PASSWORD: ${{ env.DATABASE_PASSWORD }}
          POSTGRES_DB: ${{ env.DATABASE_NAME }}
        ports:
          - 5432:5432
      redis:
        image: redis:7.2
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          key: sqlx-${{ env.SQLX_VERSION }}
      - name: Install sqlx-cli
        run:
          cargo install sqlx-cli
          --version=${{ env.SQLX_VERSION }}
          --features ${{ env.SQLX_FEATURES }}
          --no-default-features
          --locked
      - name: Migrate database
        run: |
          sudo apt-get install libpq-dev -y
          SKIP_DOCKER=true SKIP_ENV=true ./scripts/init_db.sh
      - name: Check if sqlx data is up to date
        run: |
          cargo sqlx prepare --workspace --check
      - name: Run tests
        run: cargo test

  build:
    name: Build
    needs:
      - test
      - coverage
      - fmt
      - clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build Image
        run: docker build --tag pokemon-graphql --file Dockerfile .

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Enforce formatting
        run: cargo fmt --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    env:
      ENV: test
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: ${{ env.DATABASE_USERNAME }}
          POSTGRES_PASSWORD: ${{ env.DATABASE_PASSWORD }}
          POSTGRES_DB: ${{ env.DATABASE_NAME }}
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
        with:
          key: sqlx-${{ env.SQLX_VERSION }}
      - name: Install sqlx-cli
        run:
          cargo install sqlx-cli
          --version=${{ env.SQLX_VERSION }}
          --features ${{ env.SQLX_FEATURES }}
          --no-default-features
          --locked
      - name: Migrate database
        run: |
          sudo apt-get install libpq-dev -y
          SKIP_DOCKER=true SKIP_ENV=true ./scripts/init_db.sh
      - name: Linting
        run: cargo clippy -- -D warnings

  coverage:
    name: Code coverage
    runs-on: ubuntu-latest
    env:
      ENV: test
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: ${{ env.DATABASE_USERNAME }}
          POSTGRES_PASSWORD: ${{ env.DATABASE_PASSWORD }}
          POSTGRES_DB: ${{ env.DATABASE_NAME }}
        ports:
          - 5432:5432
      redis:
        image: redis:7.2
        ports:
          - 6379:6379
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - name: Install libpq
        run: sudo apt-get update && sudo apt-get install postgresql-client libpq-dev -y
      - uses: Swatinem/rust-cache@v2
        with:
          key: sqlx-${{ env.SQLX_VERSION }}
      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin
      - name: Install sqlx-cli
        run:
          cargo install sqlx-cli
          --version=${{ env.SQLX_VERSION }}
          --features ${{ env.SQLX_FEATURES }}
          --no-default-features
          --locked
      - name: Migrate database
        run: SKIP_DOCKER=true SKIP_ENV=true ./scripts/init_db.sh
      - name: Generate code coverage
        run: cargo tarpaulin --verbose --workspace
